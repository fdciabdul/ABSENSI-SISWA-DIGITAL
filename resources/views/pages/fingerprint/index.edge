@layout.app({
    title: 'Manajemen Fingerprint',
    description: 'Halaman untuk mengelola perangkat fingerprint.',
    keywords: 'fingerprint, perangkat, absensi, biometrik',
    active: 'devices',
    breadcrumb: [
        { name: 'Dashboard', url: route('dashboard') },
        { name: 'Manajemen Fingerprint', url: route('fingerprint.index') }
    ]
})

@slot('content')
    <div class="space-y-6">
        <!-- Header Section -->
        <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
            <div>
                <h2 class="text-2xl font-bold text-gray-900">Manajemen Perangkat Fingerprint</h2>
                <p class="mt-1 text-sm text-gray-600">Kelola dan monitor perangkat fingerprint</p>
            </div>
        </div>

        <!-- Devices Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            @each(device in devices)
            <div class="bg-white rounded-lg shadow-lg p-6">
                <div class="flex items-center justify-between mb-4">
                    <div class="flex items-center">
                        <div class="w-12 h-12 bg-indigo-100 rounded-lg flex items-center justify-center">
                            <i data-lucide="fingerprint" class="w-6 h-6 text-indigo-600"></i>
                        </div>
                        <div class="ml-3">
                            <h3 class="text-lg font-medium text-gray-900">{{ device.deviceName }}</h3>
                            <p class="text-sm text-gray-500">{{ device.location }}</p>
                        </div>
                    </div>
                    <div class="flex items-center">
                        @if(device.isOnline)
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                <div class="w-2 h-2 bg-green-400 rounded-full mr-1 animate-pulse"></div>
                                Online
                            </span>
                        @else
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                <div class="w-2 h-2 bg-red-400 rounded-full mr-1"></div>
                                Offline
                            </span>
                        @endif
                    </div>
                </div>

                <!-- Device Info -->
                <div class="space-y-2 mb-4">
                    <div class="flex justify-between text-sm">
                        <span class="text-gray-500">IP Address:</span>
                        <span class="text-gray-900">{{ device.ipAddress }}:{{ device.port }}</span>
                    </div>
                    <div class="flex justify-between text-sm">
                        <span class="text-gray-500">Model:</span>
                        <span class="text-gray-900">{{ device.deviceModel }}</span>
                    </div>
                    <div class="flex justify-between text-sm">
                        <span class="text-gray-500">Serial:</span>
                        <span class="text-gray-900">{{ device.serialNumber }}</span>
                    </div>
                    @if(device.lastSyncAt)
                        <div class="flex justify-between text-sm">
                            <span class="text-gray-500">Last Sync:</span>
                            <span class="text-gray-900">{{ device.lastSyncAt.toFormat('dd/MM HH:mm') }}</span>
                        </div>
                    @endif
                </div>

                <!-- Actions -->
                <div class="grid grid-cols-2 gap-2 mb-4">
                    <button onclick="connectDevice({{ device.id }})" class="btn-action bg-blue-50 text-blue-700 hover:bg-blue-100">
                        <i data-lucide="wifi" class="w-4 h-4"></i>
                        <span class="text-xs">Koneksi</span>
                    </button>
                    <button onclick="syncUsers({{ device.id }})" class="btn-action bg-green-50 text-green-700 hover:bg-green-100">
                        <i data-lucide="users" class="w-4 h-4"></i>
                        <span class="text-xs">Sync User</span>
                    </button>
                    <button onclick="downloadLogs({{ device.id }})" class="btn-action bg-yellow-50 text-yellow-700 hover:bg-yellow-100">
                        <i data-lucide="download" class="w-4 h-4"></i>
                        <span class="text-xs">Download</span>
                    </button>
                    <button onclick="startMonitoring({{ device.id }})" class="btn-action bg-purple-50 text-purple-700 hover:bg-purple-100">
                        <i data-lucide="activity" class="w-4 h-4"></i>
                        <span class="text-xs">Monitor</span>
                    </button>
                </div>

                <!-- Recent Logs -->
                @if(device.logs.length > 0)
                    <div class="border-t pt-4">
                        <h4 class="text-sm font-medium text-gray-900 mb-2">Log Terbaru</h4>
                        <div class="space-y-1">
                            @each(log in device.logs)
                                <div class="flex items-center text-xs">
                                    @if(log.level === 'error')
                                        <i data-lucide="alert-circle" class="w-3 h-3 text-red-500 mr-2"></i>
                                    @elseif(log.level === 'warning')
                                        <i data-lucide="alert-triangle" class="w-3 h-3 text-yellow-500 mr-2"></i>
                                    @else
                                        <i data-lucide="info" class="w-3 h-3 text-blue-500 mr-2"></i>
                                    @endif
                                    <span class="text-gray-600 truncate">{{ log.message }}</span>
                                </div>
                            @endeach
                        </div>
                    </div>
                @endif
            </div>
            @endeach
        </div>
    </div>

    <style>
        .btn-action {
            @apply flex flex-col items-center justify-center p-2 rounded-md transition-colors cursor-pointer;
        }
    </style>

    <script>
        async function connectDevice(deviceId) {
            showLoading('Menghubungkan ke perangkat...');
            try {
                const response = await fetch(`/fingerprint/${deviceId}/connect`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                    }
                });
                const data = await response.json();
                hideLoading();
                
                if (data.success) {
                    customAlert.success('Berhasil terhubung ke perangkat');
                    location.reload();
                } else {
                    customAlert.error('Gagal terhubung ke perangkat');
                }
            } catch (error) {
                hideLoading();
                customAlert.error('Terjadi kesalahan saat menghubungkan');
            }
        }

        async function syncUsers(deviceId) {
            showLoading('Menyinkronkan pengguna...');
            try {
                const response = await fetch(`/fingerprint/${deviceId}/sync-users`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                    }
                });
                const data = await response.json();
                hideLoading();
                
                if (data.success) {
                    customAlert.success('Sinkronisasi pengguna berhasil');
                } else {
                    customAlert.error('Sinkronisasi pengguna gagal');
                }
            } catch (error) {
                hideLoading();
                customAlert.error('Terjadi kesalahan saat sinkronisasi');
            }
        }

        async function downloadLogs(deviceId) {
            showLoading('Mengunduh log absensi...');
            try {
                const response = await fetch(`/fingerprint/${deviceId}/download-logs`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                    }
                });
                const data = await response.json();
                hideLoading();
                
                if (data.success) {
                    customAlert.success(`Berhasil mengunduh ${data.count} log absensi`);
                    location.reload();
                } else {
                    customAlert.error('Gagal mengunduh log absensi');
                }
            } catch (error) {
                hideLoading();
                customAlert.error('Terjadi kesalahan saat mengunduh');
            }
        }

        async function startMonitoring(deviceId) {
            showLoading('Memulai monitoring real-time...');
            try {
                const response = await fetch(`/fingerprint/${deviceId}/start-monitoring`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                    }
                });
                const data = await response.json();
                hideLoading();
                
                if (data.success) {
                    customAlert.success('Monitoring real-time dimulai');
                } else {
                    customAlert.error('Gagal memulai monitoring');
                }
            } catch (error) {
                hideLoading();
                customAlert.error('Terjadi kesalahan saat memulai monitoring');
            }
        }

        function showLoading(message) {
            document.getElementById('loadingOverlay').classList.remove('hidden');
            document.getElementById('loadingOverlay').querySelector('span').textContent = message;
        }

        function hideLoading() {
            document.getElementById('loadingOverlay').classList.add('hidden');
        }
    </script>
@end

@end